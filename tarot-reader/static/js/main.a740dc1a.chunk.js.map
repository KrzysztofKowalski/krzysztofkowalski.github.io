{"version":3,"sources":["tarot/referenceCard.js","tarot/cardList.js","tarot/spreads.js","App.js","registerServiceWorker.js","index.js"],"names":["ReferenceCard","className","src","process","this","props","value","image","alt","description","title","interpretation","Component","CardListItem","state","modalIsOpen","openModal","bind","afterOpenModal","closeModal","console","log","setState","onClick","name","isOpen","onAfterOpen","onRequestClose","contentLabel","CardList","card","that","cardList","deck","map","index","renderListItem","Spreads","basename","to","exec","path","component","randomDraw","number","newShuffle","slice","sort","Math","random","SpreadCard","flipped","flipCard","e","OneCardDraw","draw","drawList","ThreeCardDraw","positions","id","placement","CelticCross","App","exact","Home","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"q3rEA0BeA,E,4JAvBd,WACC,OACC,sBAAKC,UAAU,wBAAf,UACC,8BACC,qBAAKA,UAAU,mBAAmBC,IAAKC,iBAA2BC,KAAKC,MAAMC,MAAMC,MAAOC,IAAKJ,KAAKC,MAAMC,MAAMG,YAAaC,MAAON,KAAKC,MAAMC,MAAMG,gBAEtJ,gCACC,6CACA,4BACEL,KAAKC,MAAMC,MAAMG,iBAGpB,gCACC,gDACA,4BACEL,KAAKC,MAAMC,MAAMK,2B,GAhBIC,aCctBC,E,kDACL,aAAc,IAAD,8BACZ,gBACKC,MAAQ,CACZC,aAAa,GAEd,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAPN,E,6CAUb,WACCG,QAAQC,IAAI,OAAQjB,KAAKC,MAAMC,OAC/BF,KAAKkB,SAAS,CACbP,aAAa,M,4BAIf,c,wBAGA,WACCX,KAAKkB,SAAS,CAACP,aAAa,M,oBAE7B,WACC,OACC,gCACC,wBACCd,UAAU,aACVsB,QAASnB,KAAKY,UAFf,SAGEZ,KAAKC,MAAMC,MAAMkB,OAEnB,eAAC,IAAD,CACCC,OAAQrB,KAAKU,MAAMC,YACnBW,YAAatB,KAAKc,eAClBS,eAAgBvB,KAAKe,WAErBS,aAAa,gBALd,UAOC,oBAAI3B,UAAU,4BAAd,SAA2CG,KAAKC,MAAMC,MAAMkB,OAC5D,wBAAQvB,UAAU,qBAAqBsB,QAASnB,KAAKe,WAArD,eACA,cAAC,EAAD,CAAeb,MAAOF,KAAKC,MAAMC,kB,GAzCXM,aAiDrBiB,E,oKACL,SAAeC,GACd,OACC,6BACC,cAAC,EAAD,CAAcxB,MAAOwB,KADbA,EAAKN,Q,oBAKhB,SAAOnB,GACN,IAAI0B,EAAO3B,KACL4B,EAAW5B,KAAKC,MAAM4B,KAAKC,KAAI,SAASJ,EAAMK,GAEnD,OAAOJ,EAAKK,eAAeN,MAE5B,OACC,gCACC,gDACA,oBAAI7B,UAAU,WAAd,SAA0B+B,W,GAjBPpB,aCtDvBQ,QAAQC,IAAI,yBAA0BlB,yB,IAEhCkC,E,4JACL,WAAU,IAAD,OACR,OACC,cAAC,IAAD,CAAQC,SAAUnC,wBAAlB,SACC,gCACC,mDACA,qBAAIF,UAAU,aAAd,UACC,6BAAI,cAAC,IAAD,CAAMA,UAAU,SAASsC,GAAG,eAA5B,6BACJ,6BAAI,cAAC,IAAD,CAAMtC,UAAU,SAASsC,GAAG,iBAA5B,+BACJ,6BAAI,cAAC,IAAD,CAAMtC,UAAU,SAASsC,GAAG,eAA5B,+BAEL,cAAC,IAAD,CAAOC,MAAI,EAACC,KAAK,eAAeC,UAAW,kBAAM,cAAC,EAAD,CAAaT,KAAM,EAAK5B,MAAM4B,UAC/E,cAAC,IAAD,CAAOQ,KAAK,iBAAiBC,UAAW,kBAAM,cAAC,EAAD,CAAeT,KAAM,EAAK5B,MAAM4B,UAC9E,cAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAW,kBAAM,cAAC,EAAD,CAAaT,KAAM,EAAK5B,MAAM4B,mB,GAbzDrB,aAoBtB,SAAS+B,EAAWV,EAAMW,GAEzB,IAAIC,EAAaZ,EAAKa,QAGtB,OAFAD,EAAaA,EAAWE,MAAK,WAAW,MAAO,GAAKC,KAAKC,aAC7BH,MAAM,EAAEF,G,IAI/BM,E,kDACL,WAAY7C,GAAQ,IAAD,8BAClB,cAAMA,IACDS,MAAQ,CACZqC,SAAS,EACTpC,aAAa,GAEd,EAAKqC,SAAW,EAAKA,SAASnC,KAAd,gBAChB,EAAKD,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBATA,E,4CAWnB,SAASoC,GACRjD,KAAKkB,SAAS,CACb6B,SAAU/C,KAAKU,MAAMqC,Y,oBAGvB,WACC,OACC,gCACC,qBAAKlD,UAAU,gBAAf,SACC,sBAAKA,UAAWG,KAAKU,MAAMqC,QAAU,qBAAsB,aAA3D,UACC,sBACClD,UAAU,QADX,UAIC,qBAAKO,IAAI,OAAON,IAAKC,iBAA2BC,KAAKC,MAAMC,MAAMC,QACjE,wBAAQN,UAAU,wBAAwBsB,QAASnB,KAAKY,UAAxD,kBAGD,qBACCf,UAAU,OACVsB,QAASnB,KAAKgD,gBAMjB,eAAC,IAAD,CACC3B,OAAQrB,KAAKU,MAAMC,YACnBW,YAAatB,KAAKc,eAClBS,eAAgBvB,KAAKe,WAErBS,aAAa,gBALd,UAOC,oBAAI3B,UAAU,4BAAd,SAA2CG,KAAKC,MAAMC,MAAMkB,OAC5D,wBAAQvB,UAAU,qBAAqBsB,QAASnB,KAAKe,WAArD,eACA,cAAC,EAAD,CAAeb,MAAOF,KAAKC,MAAMC,kB,GA/CbO,GAsDnByC,E,4JACL,WACClD,KAAKmD,KAAOZ,EAAWvC,KAAKC,MAAM4B,KAAM,GACxC,IAAMuB,EAAWpD,KAAKmD,KAAKrB,KAAI,SAASJ,EAAMK,GAE7C,OACC,6BACC,cAAC,EAAD,CAAY7B,MAAOwB,KADXA,EAAKN,SAKhB,OACC,gCACC,6GACA,oBAAIvB,UAAU,kBAAd,SAAiCuD,W,GAdX5C,aAoBpB6C,E,kDACL,WAAYpD,GAAO,IAAD,8BACjB,cAAMA,IAGDqD,UAAY,CAChB,CAACC,GAAI,EAAGC,UAAW,QACnB,CAACD,GAAI,EAAGC,UAAW,WACnB,CAACD,GAAI,EAAGC,UAAW,WAPH,E,0CAUlB,WACC,IAAI7B,EAAO3B,KACXA,KAAKmD,KAAOZ,EAAWvC,KAAKC,MAAM4B,KAAM,GACxC,IAAMuB,EAAWpD,KAAKmD,KAAKrB,KAAI,SAASJ,EAAMK,GAE7C,OACC,+BACC,iCAASJ,EAAK2B,UAAUvB,GAAOyB,YAAmB,cAAC,EAAD,CAAYtD,MAAOwB,MAD7DA,EAAKN,SAKhB,OACC,gCACC,8DACA,oBAAIvB,UAAU,oBAAd,SAAmCuD,W,GAzBX5C,aA+BtBiD,E,kDACL,WAAYxD,GAAO,IAAD,8BACjB,cAAMA,IAGDqD,UAAY,CAChB,CAACC,GAAI,EAAGC,UAAW,mDACnB,CAACD,GAAI,EAAGC,UAAW,0DACnB,CAACD,GAAI,EAAGC,UAAW,0EACnB,CAACD,GAAI,EAAGC,UAAW,oEACnB,CAACD,GAAI,EAAGC,UAAW,0CACnB,CAACD,GAAI,EAAGC,UAAW,2CACnB,CAACD,GAAI,EAAGC,UAAW,qDACnB,CAACD,GAAI,EAAGC,UAAW,+BACnB,CAACD,GAAI,EAAGC,UAAW,iCACnB,CAACD,GAAI,EAAGC,UAAW,iBAdH,E,0CAiBlB,WACC,IAAI7B,EAAO3B,KACXA,KAAKmD,KAAOZ,EAAWvC,KAAKC,MAAM4B,KAAM,IACxC,IAAMuB,EAAWpD,KAAKmD,KAAKrB,KAAI,SAASJ,EAAMK,GAE7C,OACC,+BACC,iCAASJ,EAAK2B,UAAUvB,GAAOyB,YAAmB,cAAC,EAAD,CAAYtD,MAAOwB,MAD7DA,EAAKN,SAKhB,OACC,gCACC,gEACA,oBAAIvB,UAAU,sBAAd,SAAqCuD,W,GAhCf5C,a,QCpIpBkD,E,4JACL,WACC,OACC,cAAC,IAAD,CAAQxB,SAAUnC,gBAAlB,SACC,gCACC,qBAAIF,UAAU,UAAd,UACC,6BAAI,cAAC,IAAD,CAAMA,UAAU,wBAAwBsC,GAAG,IAA3C,oBACJ,6BAAI,cAAC,IAAD,CAAMtC,UAAU,wBAAwBsC,GAAG,SAA3C,8BACJ,6BAAI,cAAC,IAAD,CAAMtC,UAAU,wBAAwBsC,GAAG,WAA3C,0BAEL,cAAC,IAAD,CAAOwB,OAAK,EAACtB,KAAK,IAAIC,UAAWsB,IACjC,cAAC,IAAD,CAAOvB,KAAK,SAASC,UAAW,kBAAM,cAAC,EAAD,CAAUT,KAAMA,OACtD,cAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAW,kBAAM,cAAC,EAAD,CAAST,KAAMA,gB,GAZ1CrB,aAmBZoD,E,4JACL,WACC,OACC,gCACC,wDACA,0FACA,qE,GANepD,aAYJkD,ICnCTG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjE,QACf2D,UAAUC,cAAcQ,WAK1B9D,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB8D,OAAM,SAAAC,GACLhE,QAAQgE,MAAM,4CAA6CA,MC9DjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAItF,gBAAwBgE,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMrE,gBAAN,sBAEP8D,EAwCV,SAAiCO,GAE/BoB,MAAMpB,GACHI,MAAK,SAAAiB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,MAAK,SAAAC,GACjCA,EAAasB,aAAavB,MAAK,WAC7BT,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBW,OAAM,WACL/D,QAAQC,IACN,oEA5DAgF,CAAwB7B,GAGxBD,EAAgBC,OC9BxB8B,K","file":"static/js/main.a740dc1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ReferenceCard extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='tarotEntryParent u-cf'>\n\t\t\t\t<div>\n\t\t\t\t\t<img className='u-max-full-width' src={process.env.PUBLIC_URL+'/'+this.props.value.image} alt={this.props.value.description} title={this.props.value.description}></img>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Description</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.props.value.description}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Interpretation</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.props.value.interpretation}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ReferenceCard;\n","import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport ReferenceCard from './referenceCard.js';\n\n// const customModalStyles = {\n//   content : {\n//     top                   : '50%',\n//     left                  : '50%',\n//     right                 : 'auto',\n//     bottom                : 'auto',\n// \twidth\t\t\t\t  : '300px',\n//     marginRight           : '-50%',\n//     transform             : 'translate(-50%, -50%)'\n//   }\n// };\n\nclass CardListItem extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmodalIsOpen: false,\n\t\t};\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.afterOpenModal = this.afterOpenModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t}\n\n\topenModal() {\n\t\tconsole.log('card', this.props.value)\n\t\tthis.setState({\n\t\t\tmodalIsOpen: true,\n\t\t\t// modalContent: card\n\t\t})\n\t}\n\tafterOpenModal() {\n\t\t// this.subtitle.style.color = '#f00';\n\t}\n\tcloseModal() {\n\t\tthis.setState({modalIsOpen: false})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclassName='cardButton'\n\t\t\t\t\tonClick={this.openModal}\n\t\t\t\t>{this.props.value.name}\n\t\t\t\t</button>\n\t\t\t\t<Modal\n\t\t\t\t\tisOpen={this.state.modalIsOpen}\n\t\t\t\t\tonAfterOpen={this.afterOpenModal}\n\t\t\t\t\tonRequestClose={this.closeModal}\n\t\t\t\t\t// style={customModalStyles}\n\t\t\t\t\tcontentLabel='Example modal'\n\t\t\t\t>\n\t\t\t\t\t<h2 className='u-pull-left referenceHead'>{this.props.value.name}</h2>\n\t\t\t\t\t<button className='u-pull-right close' onClick={this.closeModal}>X</button>\n\t\t\t\t\t<ReferenceCard value={this.props.value}/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nclass CardList extends Component {\n\trenderListItem(card){\n\t\treturn (\n\t\t\t<li key={card.name}>\n\t\t\t\t<CardListItem value={card}></CardListItem>\n\t\t\t</li>\n\t\t)\n\t}\n\trender(props){\n\t\tlet that = this\n\t\tconst cardList = this.props.deck.map(function(card, index){\n\t\t\t// console.log('card', card, 'index', index)\n\t\t\treturn that.renderListItem(card)\n\t\t});\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Card Reference</h1>\n\t\t\t\t<ul className='cardList'>{cardList}</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport { CardList, CardListItem }\n","import React, { Component } from 'react';\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tLink\n} from 'react-router-dom';\nimport Modal from 'react-modal';\n\nimport { CardListItem } from './cardList.js';\nimport ReferenceCard from './referenceCard.js';\n\nconsole.log('process.env.PUBLIC_URL', process.env.PUBLIC_URL + '/Spreads')\n\nclass Spreads extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router basename={process.env.PUBLIC_URL + '/Spreads'}>\n\t\t\t\t<div>\n\t\t\t\t\t<h1>Available Spreads</h1>\n\t\t\t\t\t<ul className='spreadsNav'>\n\t\t\t\t\t\t<li><Link className='button' to=\"/OneCardDraw\">One Card Draw</Link></li>\n\t\t\t\t\t\t<li><Link className='button' to=\"/ThreeCardDraw\">Three Card Draw</Link></li>\n\t\t\t\t\t\t<li><Link className='button' to=\"/CelticCross\">Celtic Cross</Link></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<Route exec path=\"/OneCardDraw\" component={() => <OneCardDraw deck={this.props.deck}/>}/>\n\t\t\t\t\t<Route path=\"/ThreeCardDraw\" component={() => <ThreeCardDraw deck={this.props.deck}/>}/>\n\t\t\t\t\t<Route path=\"/CelticCross\" component={() => <CelticCross deck={this.props.deck}/>}/>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t)\n\t}\n}\n\nfunction randomDraw(deck, number){\n\t// function that returns random unique cards from provided deck\n\tlet newShuffle = deck.slice();\n\tnewShuffle = newShuffle.sort(function(){return .5 - Math.random()});\n\tlet drawnCards = newShuffle.slice(0,number);\n\treturn drawnCards;\n}\n\nclass SpreadCard extends CardListItem {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tflipped: false,\n\t\t\tmodalIsOpen: false\n\t\t}\n\t\tthis.flipCard = this.flipCard.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.afterOpenModal = this.afterOpenModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t}\n\tflipCard(e) {\n\t\tthis.setState({\n\t\t\tflipped: !this.state.flipped\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='cardContainer'>\n\t\t\t\t\t<div className={this.state.flipped ? 'spreadCard flipped': 'spreadCard' } >\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='front'\n\t\t\t\t\t\t\t// onClick={this.openModal}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img alt='card' src={process.env.PUBLIC_URL+'/'+this.props.value.image}/>\n\t\t\t\t\t\t\t<button className='button button-primary' onClick={this.openModal}>\n\t\t\t\t\t\t\t?</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='back'\n\t\t\t\t\t\t\tonClick={this.flipCard}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Modal\n\t\t\t\t\tisOpen={this.state.modalIsOpen}\n\t\t\t\t\tonAfterOpen={this.afterOpenModal}\n\t\t\t\t\tonRequestClose={this.closeModal}\n\t\t\t\t\t// style={customModalStyles}\n\t\t\t\t\tcontentLabel='Example modal'\n\t\t\t\t>\n\t\t\t\t\t<h2 className='u-pull-left referenceHead'>{this.props.value.name}</h2>\n\t\t\t\t\t<button className='u-pull-right close' onClick={this.closeModal}>X</button>\n\t\t\t\t\t<ReferenceCard value={this.props.value}/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass OneCardDraw extends Component {\n\trender() {\n\t\tthis.draw = randomDraw(this.props.deck, 1)\n\t\tconst drawList = this.draw.map(function(card, index){\n\t\t\t// console.log('card', card, 'index', index)\n\t\t\treturn (\n\t\t\t\t<li key={card.name}>\n\t\t\t\t\t<SpreadCard value={card}/>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>This is a new one-card draw. Use it as a concept to meditate on for the day.</p>\n\t\t\t\t<ul className='oneCardDrawList'>{drawList}</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass ThreeCardDraw extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\t// console.log('this', this.props.deck)\n\n\t\tthis.positions = [\n\t\t\t{id: 0, placement: 'Past'},\n\t\t\t{id: 1, placement: 'Present'},\n\t\t\t{id: 2, placement: 'Future'},\n\t\t]\n\t}\n\trender() {\n\t\tlet that = this;\n\t\tthis.draw = randomDraw(this.props.deck, 3);\n\t\tconst drawList = this.draw.map(function(card, index){\n\t\t\t// console.log('card', card, 'index', index)\n\t\t\treturn (\n\t\t\t\t<li key={card.name}>\n\t\t\t\t\t<strong>{that.positions[index].placement}</strong><SpreadCard value={card}/>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>This is a new three-card draw</p>\n\t\t\t\t<ul className='threeCardDrawList'>{drawList}</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass CelticCross extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\t// console.log('this', this.props.deck)\n\n\t\tthis.positions = [\n\t\t\t{id: 0, placement: 'What influences currently surround the querent?'},\n\t\t\t{id: 1, placement: 'What are the obstacles currently blocking the querent?'},\n\t\t\t{id: 2, placement: 'The recent past which formed the foundation for the current situation.'},\n\t\t\t{id: 3, placement: 'The distant past — issues the querent has had to deal with.'},\n\t\t\t{id: 4, placement: 'What does the querent wish to achieve?'},\n\t\t\t{id: 5, placement: 'What is before the querent? The future.'},\n\t\t\t{id: 6, placement: 'The querent\\'s attitude or position on the matter.'},\n\t\t\t{id: 7, placement: 'How others see the querent.'},\n\t\t\t{id: 8, placement: 'The querent\\'s hopes or fears.'},\n\t\t\t{id: 9, placement: 'The outcome.'},\n\t\t]\n\t}\n\trender() {\n\t\tlet that = this;\n\t\tthis.draw = randomDraw(this.props.deck, 10);\n\t\tconst drawList = this.draw.map(function(card, index){\n\t\t\t// console.log('card', card, 'index', index)\n\t\t\treturn (\n\t\t\t\t<li key={card.name}>\n\t\t\t\t\t<strong>{that.positions[index].placement}</strong><SpreadCard value={card}/>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>This is a new celtic cross draw</p>\n\t\t\t\t<ul className='celticCrossDrawList'>{drawList}</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport { Spreads };\n","import React, { Component } from 'react'\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tLink\n} from 'react-router-dom'\n// import Modal from 'react-modal';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './tarot/cardList.js';\nimport { Spreads } from './tarot/spreads.js';\n// note: below json generated using ./tarot/makedeck.js, but I elected to use pregenerated json to save some processing time\nimport deck from './tarot/tarot.json';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t<div>\n\t\t\t\t\t<ul className='mainNav'>\n\t\t\t\t\t\t<li><Link className='button button-primary' to=\"/\">Home</Link></li>\n\t\t\t\t\t\t<li><Link className='button button-primary' to=\"/Cards\">Card Reference</Link></li>\n\t\t\t\t\t\t<li><Link className='button button-primary' to=\"/Spreads\">Spreads</Link></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<Route exact path='/' component={Home}/>\n\t\t\t\t\t<Route path='/Cards' component={() => <CardList deck={deck}/>}/>\n\t\t\t\t\t<Route path='/Spreads' component={() => <Spreads deck={deck}/>}/>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nclass Home extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Welcome to Frog Tarot </h1>\n\t\t\t\t<p>Tarot reader is a simple tarot reading and reference app.</p>\n\t\t\t\t<p>Built with Frogs using React.</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'skeleton-css/css/normalize.css';\nimport 'skeleton-css/css/skeleton.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}